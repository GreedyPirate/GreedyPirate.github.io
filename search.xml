<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Boot提供的事件监听</title>
      <link href="/2018/07/31/Spring-boot%E6%8F%90%E4%BE%9B%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
      <url>/2018/07/31/Spring-boot%E6%8F%90%E4%BE%9B%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
      <content type="html"><![CDATA[<p>在Spring Boot doc的<em>Application Events and Listeners</em>一章中提到，Spring Boot按以下顺序提供了6个事件，供开发者编写<code>ApplicationListener</code>监听相应的事件</p><pre><code>1.ApplicationStartingEvent：在开始运行时，监听器注册和初始化之后被触发2.ApplicationEnvironmentPreparedEvent：发现 Environment 被上下文使用时，上下文被创建之前触发3.ApplicationPreparedEvent：在启动刷新之前，bean定义被加载之后被触发4.ApplicationStartedEvent：上下文刷新之前，应用和命令行启动器运行之前触发5.ApplicationReadyEvent：在所有应用和命令行启动器调用之后，这表明应用已经准备好处理请求6.ApplicationFailedEvent：启动时出现异常触发</code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>编写代码的难度不高，读者可根据自己的需求编写相应的listener，以ApplicationStartingEvent为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class SpringBootListener implements ApplicationListener&lt;ApplicationStartingEvent&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onApplicationEvent(ApplicationStartingEvent event) &#123;</span><br><span class="line">        System.out.println(&quot;listening spring boot starting event&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>根据文档中的提示，可以使用三种方式添加这6个事件的监听器</p><p>1.通过SpringApplication的addApplicationListener方法添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication.run(SpringBootDocApplication.class,args).addApplicationListener(new SpringBootListener());</span><br></pre></td></tr></table></figure><p>2.类似的用SpringApplicationBuilder实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new SpringApplicationBuilder(SpringBootDocApplication.class).listeners(new SpringBootListener()).run(args);</span><br></pre></td></tr></table></figure><p>3.如果Listener很多，也可以写在配置文件中，在resources目录下新建META-INF/spring.factories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=com.ttyc.doc.extend.event.customer.SpringBootListener</span><br></pre></td></tr></table></figure><p>最终项目一启动便输出: listening spring boot starting event</p>]]></content>
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>观察者模式</title>
      <link href="/2018/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/26/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>笔者从事java两年里，经常听到这样的需求: “你这里改了，要告诉我们的服务啊，不然我们的数据就不是最新的”</p><p>这是一个很常见的需求，目前听过的解决方案大概有这么几种：</p><ul><li><p>A发生改变时，主动调用B的接口，同步数据，但是想想如果有很多个B服务，你要调用多少次？</p></li><li><p>数据发现改变，本质上是在数据库中改变的，可以用触发器实现，但是不同的数据库实现不同，<br>  限制很多，对性能也有一定的影响，就拿常用的MySQL来说，基于行触发的触发器，在大批量数据更新时，效率极低</p></li><li><p>使用消息中间件，比如我司最爱用的Kafka，使用异步方式解耦</p></li></ul><p>消息中间件最简单的模型：生产者往topic里生产一条数据，告诉Kafka，订阅了这个topic的消费者立即消费做出响应</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>再往简单里说说<strong>观察者模式</strong>，只要理解它的基本原理，代码一目了然</p><ol><li>首先明确有两个概念，观察者，被观察者，我更喜欢理解为监视器和目标</li><li>目标维护一个列表，里面记录了注册过的监视器，对外提供注册列表的添加和移除api</li><li>目标发生改变时，遍历这个列表里的所有监视器，通过调用监视器的一个方法通知监视器</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>观察者模式的使用场景</p><ol><li>当一个对象改变，需要同时改变其它对象，但是却不知道具体多少对象有待改变</li><li>当一个对象必须通知其它对象，但是却不知道具体对象到底是谁。换句话说，你不希望这些对象<br> 是紧密耦合的。</li></ol><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><p>原理并不难，可以说十分简单，两个类，注册列表用一个List集合表示，是否发生改变用一个布尔值表示，很容易手写出来，那么为什么用JDK自带的Observable(被观察者)，Observer(观察者)呢？</p><p>点开Observable的源码，since JDK1.0就有的一个类，十分古老，所以出现Vector也不足为奇了，再看里面的方法，关于修改Vector和changed的地方都被synchronized修饰，说明JDK对线程安全性考虑的很好</p><h2 id="JDK源码"><a href="#JDK源码" class="headerlink" title="JDK源码"></a>JDK源码</h2><p>Observable类中用于通知观察者的源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void notifyObservers(Object arg) &#123;</span><br><span class="line">        Object[] arrLocal;</span><br><span class="line">        /**</span><br><span class="line">         * 自己翻译了下注释：我们不希望观察者在处理自己的监视器时，</span><br><span class="line">         * 回调到所有的代码。我们从集合里取出每一个被观察者，并且</span><br><span class="line">         * 存储观察者的需要同步的状态，但是不应该通知观察者们。</span><br><span class="line">         * 任意竞争锁的最糟糕结果是</span><br><span class="line">         *  1.一个新增的观察者可能错过通知</span><br><span class="line">         *  2.一个最近注销的观察者在它不需要的时候被通知了</span><br><span class="line">         */</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (!changed)</span><br><span class="line">                return;</span><br><span class="line">            arrLocal = obs.toArray();</span><br><span class="line">            clearChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = arrLocal.length - 1; i &gt;= 0; i--)</span><br><span class="line">            ((Observer) arrLocal[i]).update(this, arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>流程很简单：</p><ol><li>判断标志位是否为已改变</li><li>集合转为数组，然后重置标志位为false</li><li>遍历每一个观察者，调用方法</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码实现观察者模式:主要想表达的是Name发生改变时，通知到观察者</p><h3 id="Step-1-被观察者"><a href="#Step-1-被观察者" class="headerlink" title="Step 1: 被观察者"></a>Step 1: 被观察者</h3><p>继承Observable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Target extends Observable &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.setChanged();</span><br><span class="line">        this.notifyObservers(&quot;name has been changed, now is &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2-观察者"><a href="#Step-2-观察者" class="headerlink" title="Step 2: 观察者"></a>Step 2: 观察者</h3><p>观察者实现Observable接口，里面只有一个update方法，可以说是一个函数式接口，读者可以回看一下源码中的这一段，应该知道这个方法的作用了，这是观察者对被观察者通知做出的反应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((Observer) arrLocal[i]).update(this, arg);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Watcher implements Observer &#123;</span><br><span class="line">   @Override</span><br><span class="line">    public void update(Observable o, Object arg) &#123;</span><br><span class="line">        Target target = (Target) o;</span><br><span class="line">        System.out.println(&quot;I am be notified by &quot; + target.getName() + &quot;, message is &quot; + arg);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-3-验证"><a href="#Step-3-验证" class="headerlink" title="Step 3: 验证"></a>Step 3: 验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Target target = new Target();</span><br><span class="line"></span><br><span class="line">        Watcher foo = new Watcher();</span><br><span class="line">        Watcher bar = new Watcher();</span><br><span class="line"></span><br><span class="line">        target.addObserver(foo);</span><br><span class="line">        target.addObserver(bar);</span><br><span class="line"></span><br><span class="line">        target.setName(&quot;Jim&quot;);</span><br><span class="line"></span><br><span class="line">        target.deleteObserver(bar);</span><br><span class="line">        target.setName(&quot;Kim&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am be notified by Jim, message is name has been changed, now is Jim</span><br><span class="line">I am be notified by Jim, message is name has been changed, now is Jim</span><br><span class="line">I am be notified by Kim, message is name has been changed, now is Kim</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ol><li>第一次setName通知了两个观察者，然后移除了bar观察者，下一次通知就只有一个观察者收到了</li><li>现在想想以前用过的vue，应该也使用到了观察者模式</li></ol><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java中解耦是很重要的一件事，小到类，大到多个系统，以我愚见，都是一种思想</span><br><span class="line"></span><br><span class="line">增加一个中间层，可以是一个接口，一个变量，一个中间件，一份文件，</span><br><span class="line">这个中间层有很多名词，注册中心，负载均衡，代理，委托</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring ContextRefreshedEvent事件</title>
      <link href="/2018/07/26/Spring-ContextRefreshedEvent%E4%BA%8B%E4%BB%B6/"/>
      <url>/2018/07/26/Spring-ContextRefreshedEvent%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">遇到的单词</span><br><span class="line">infrastructure ： 基础设施</span><br><span class="line">arbitrary : 任何的，所有的</span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文主要在观察者模式的基础上研究Spring中的事件机制</p><p>ApplicationListener监听以下4个事件：ContextStartedEvent，ContextRefreshedEvent，ContextStartedEvent，ContextClosedEvent</p><p>实现对ApplicationContext刷新或初始化时的监听，测试中未出现加载两次的情况，如果需要加入<code>event.getApplicationContext().getParent()</code>判断</p><h2 id="监听ContextRefreshedEvent"><a href="#监听ContextRefreshedEvent" class="headerlink" title="监听ContextRefreshedEvent"></a>监听ContextRefreshedEvent</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextEnvent</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Spring Refreshed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自从Spring 4.2以后，可以使用@EventListener注解实现，相信用过Spring-Kafka的读者不会陌生这种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotateContextEvent</span></span>&#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRefresh</span><span class="params">(ContextRefreshedEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Spring Refreshed by annotated approach"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>实现起来很简单，接下来尝试下Spring中的自定义事件</p><p>自定义事件需要继承ApplicationEvent，这个类并没有什么深意，只是简单封装EventObject加入了时间戳</p><h3 id="Step-1-定义事件——被观察者"><a href="#Step-1-定义事件——被观察者" class="headerlink" title="Step 1 : 定义事件——被观察者"></a>Step 1 : 定义事件——被观察者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerEvent</span><span class="params">(Object source, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2-定义监听器——观察者"><a href="#Step-2-定义监听器——观察者" class="headerlink" title="Step 2 : 定义监听器——观察者"></a>Step 2 : 定义监听器——观察者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">CustomerEvent</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(CustomerEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CustomerListener listening： CustomerEvent has been triggered, event name is "</span> + event.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-3-多了一步事件发布"><a href="#Step-3-多了一步事件发布" class="headerlink" title="Step 3 : 多了一步事件发布"></a>Step 3 : 多了一步事件发布</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEventPublisher</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CustomerEvent customerEvent = <span class="keyword">new</span> CustomerEvent(<span class="keyword">this</span>,<span class="string">"click"</span>);</span><br><span class="line">        publisher.publishEvent(customerEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDocApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBootDocApplication.class, args)</span><br><span class="line">                .getBean(CustomEventPublisher.class).publish();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CustomerListener listening： CustomerEvent has been triggered, event name is click</span><br></pre></td></tr></table></figure><h3 id="如果再加入一个监听者呢？是否能通知到"><a href="#如果再加入一个监听者呢？是否能通知到" class="headerlink" title="如果再加入一个监听者呢？是否能通知到"></a>如果再加入一个监听者呢？是否能通知到</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtraListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">CustomerEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(CustomerEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ExtraListener listening： CustomerEvent has been triggered, event name is "</span> + event.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerListener listening： CustomerEvent has been triggered, event name is click</span><br><span class="line">ExtraListener listening： CustomerEvent has been triggered, event name is click</span><br></pre></td></tr></table></figure><hr><h2 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftndnytxtsj30wa03maat.jpg" width="65%" align="left"></p><p>这里和观察者模式的遍历一样，调用所有的监听器<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftndouogerj312e0b2gok.jpg" width="65%" align="left"></p><p>进入getApplicationListeners方法，可以看到如何查找注册在event上的Listener<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1ftndn5aqzej30us0ion18.jpg" width="65%" align="left"></p><p>根据@Order注解对Listener排序，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotationAwareOrderComparator.sort(allListeners);</span><br></pre></td></tr></table></figure></p><p>对两个Listener加入@Order注解，果然值较小的ExtraListener先执行</p><p>注：@Order Lower values have higher priority</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><pre><code>对自己的猜想要多验证</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2" target="_blank" rel="noopener">https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2</a><br><a href="http://wiki.jikexueyuan.com/project/spring/custom-events-in-spring.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/spring/custom-events-in-spring.html</a><br><a href="https://blog.csdn.net/tuzongxun/article/details/53637159" target="_blank" rel="noopener">https://blog.csdn.net/tuzongxun/article/details/53637159</a><br><a href="https://blog.csdn.net/zhangningzql/article/details/52515890" target="_blank" rel="noopener">https://blog.csdn.net/zhangningzql/article/details/52515890</a></p>]]></content>
      
      <categories>
          
          <category> Spring 扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring, Spring 扩展 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring InitializingBean接口</title>
      <link href="/2018/07/25/Spring-InitializingBean%E6%8E%A5%E5%8F%A3/"/>
      <url>/2018/07/25/Spring-InitializingBean%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h2 id="源文档"><a href="#源文档" class="headerlink" title="源文档"></a>源文档</h2><p>InitializingBean接口的doc文档解释如下，大意为：</p><p>实现这个接口的bean，可以在BeanFactory设置完所有的属性之后生效，例如，执行自定义的bean初始化，或者只是为了检查所有的属性被设置了</p><p>另一个选择是指定<code>init-method</code>，例如在XML中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Interface to be implemented by beans that need to react once all their</span><br><span class="line"> * properties have been set by a BeanFactory: for example, to perform custom</span><br><span class="line"> * initialization, or merely to check that all mandatory properties have been set.</span><br><span class="line"> *</span><br><span class="line"> * An alternative to implementing InitializingBean is specifying a custom</span><br><span class="line"> * init-method, for example in an XML bean definition.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>从接口描述上可以看出和指定<em>init-method</em>的作用应该是类似的,测试代码如下</p><h3 id="Step-1：实现InitializingBean接口"><a href="#Step-1：实现InitializingBean接口" class="headerlink" title="Step 1：实现InitializingBean接口"></a>Step 1：实现InitializingBean接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitBeanExtend</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after properties set"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bean inited"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2-使用java-config定义bean，指定init-method"><a href="#Step-2-使用java-config定义bean，指定init-method" class="headerlink" title="Step 2: 使用java config定义bean，指定init-method"></a>Step 2: 使用java config定义bean，指定init-method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InitBeanExtend <span class="title">initBeanExtend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitBeanExtend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-3-编写测试用例"><a href="#Step-3-编写测试用例" class="headerlink" title="Step 3: 编写测试用例"></a>Step 3: 编写测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDocApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">InitBeanExtend initBeanExtend;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">InitBeanExtend bean = InitBeanExtend.class.cast(initBeanExtend);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">after properties <span class="built_in">set</span></span><br><span class="line">bean inited</span><br></pre></td></tr></table></figure><p>结果表明init-method是在afterPropertiesSet方法执行之后调用的</p><hr><p>查看<code>AbstractAutowireCapableBeanFactory</code>类源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeCustomInitMethod</span><span class="params">(String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">...</span><br><span class="line">String initMethodName = mbd.getInitMethodName();</span><br><span class="line"><span class="keyword">final</span> Method initMethod = (mbd.isNonPublicAccessAllowed() ?</span><br><span class="line">BeanUtils.findMethod(bean.getClass(), initMethodName) :</span><br><span class="line">ClassUtils.getMethodIfAvailable(bean.getClass(), initMethodName));</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二者除了先后顺序的明显区别之外，可以看出init-method是通过反射达到目的的，而InitializingBean接口具有代码侵入性，有对Spring的依赖</p><p>注意: init-method方法不能有参数，否则将抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.support.BeanDefinitionValidationException: Couldn&apos;t find an init method named &apos;init&apos; on bean with name &apos;initBeanExtend&apos;</span><br></pre></td></tr></table></figure><p>在IDEA下会有编译警告<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1ftn30ruqgzj30lc03waas.jpg" width="65%" align="left"></p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>看过Spring源码的读者经常可以看到这个接口的使用，比如在bean初始化完属性之后，进行参数检查</p>]]></content>
      
      <categories>
          
          <category> Spring 扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring, Spring 扩展 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Boot文档阅读笔记</title>
      <link href="/2018/07/24/Spring%20Boot%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/24/Spring%20Boot%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>Spring Boot 版本 2.0.3.RELEASE</p><p>文档地址：<a href="https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/html/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.3.RELEASE/reference/html/</a></p><h2 id="遇到的英文单词"><a href="#遇到的英文单词" class="headerlink" title="遇到的英文单词"></a>遇到的英文单词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typical: 典型的</span><br><span class="line">transitively: 可传递地</span><br><span class="line">Several of : 几个</span><br><span class="line">dives into : 深入</span><br><span class="line">bootstrap : 引导</span><br><span class="line">delegate : 委托</span><br><span class="line">approach : 方法</span><br><span class="line">perform : 执行</span><br><span class="line">detect : 察觉，侦测，发现</span><br></pre></td></tr></table></figure><h2 id="Spring-CLI的使用"><a href="#Spring-CLI的使用" class="headerlink" title="Spring CLI的使用"></a>Spring CLI的使用</h2><p>step 1： sdkman安装spring-boot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdk install springboot</span><br></pre></td></tr></table></figure><p>step 2：运行groovy脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring run app.groovy</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">class ThisWillActuallyRun &#123;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/&quot;)</span><br><span class="line">String home() &#123;</span><br><span class="line">&quot;Hello World!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从低版本的Spring-Boot升级到2-0"><a href="#从低版本的Spring-Boot升级到2-0" class="headerlink" title="从低版本的Spring Boot升级到2.0"></a>从低版本的Spring Boot升级到2.0</h2><p>加入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-properties-migrator&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>运行一次后移除该依赖</p><h2 id="使用maven命令启动Spring-Boot"><a href="#使用maven命令启动Spring-Boot" class="headerlink" title="使用maven命令启动Spring Boot"></a>使用maven命令启动Spring Boot</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure><p>相应的gradle有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle bootRun</span><br></pre></td></tr></table></figure></p><p>可以export系统变量(没有测试):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_OPTS=-Xmx1024m</span><br></pre></td></tr></table></figure><h2 id="社区提供的Spring-Boot-starter"><a href="#社区提供的Spring-Boot-starter" class="headerlink" title="社区提供的Spring Boot starter"></a>社区提供的Spring Boot starter</h2><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters" target="_blank" rel="noopener">starters列表</a></p><h2 id="如何排除不想生效的Bean"><a href="#如何排除不想生效的Bean" class="headerlink" title="如何排除不想生效的Bean"></a>如何排除不想生效的Bean</h2><p>方式一：使用exclude属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br></pre></td></tr></table></figure></p><p>方式二：如果classpath下没有这个类，使用类全名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication(excludeName = &quot;org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration&quot;)</span><br></pre></td></tr></table></figure></p><p>方式三：如果有多个，可以使用spring.autoconfigure.exclude属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.autoconfigure.exclude=DataSourceAutoConfiguration.class</span><br></pre></td></tr></table></figure></p><p>你可以同时在注解和属性上使用exclude</p><p>You can define exclusions both at the annotation level and by using the property.</p><h2 id="构造器注入可以省略-Autowired"><a href="#构造器注入可以省略-Autowired" class="headerlink" title="构造器注入可以省略@Autowired"></a>构造器注入可以省略@Autowired</h2><p><em>If a bean has one constructor, you can omit the @Autowired</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class DatabaseAccountService implements AccountService &#123;</span><br><span class="line"></span><br><span class="line">private final RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line">public DatabaseAccountService(RiskAssessor riskAssessor) &#123;</span><br><span class="line">this.riskAssessor = riskAssessor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Remote-Debug时的启动参数"><a href="#使用Remote-Debug时的启动参数" class="headerlink" title="使用Remote Debug时的启动参数"></a>使用Remote Debug时的启动参数</h2><p>仅供参考，自己还没有试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n </span><br><span class="line">-jar target/myapplication-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h2 id="IDEA中使用devtools的正确姿势"><a href="#IDEA中使用devtools的正确姿势" class="headerlink" title="IDEA中使用devtools的正确姿势"></a>IDEA中使用devtools的正确姿势</h2><p>修改代码后，需要点击: <em>Build-&gt;Build Project</em></p><h2 id="编程式的属性设置"><a href="#编程式的属性设置" class="headerlink" title="编程式的属性设置"></a>编程式的属性设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.setProperty(&quot;spring.devtools.restart.enabled&quot;, &quot;false&quot;);</span><br><span class="line">SpringApplication.run(MyApp.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot提供的几个很有用的事件"><a href="#Spring-Boot提供的几个很有用的事件" class="headerlink" title="Spring Boot提供的几个很有用的事件"></a>Spring Boot提供的几个很有用的事件</h2><p>针对Spring boot提供的事件，编写自己的Listener</p><pre><code>1.ApplicationStartingEvent：在开始运行时，监听器注册和初始化之后被触发2.ApplicationEnvironmentPreparedEvent：发现 Environment 被上下文使用时，上下文被创建之前触发3.ApplicationPreparedEvent：在启动刷新之前，bean定义被加载之后被触发4.ApplicationStartedEvent：上下文刷新之前，应用和命令行启动器运行之前触发5.ApplicationReadyEvent：在所有应用和命令行启动器调用之后，这表明应用已经准备好处理请求6.ApplicationFailedEvent：启动时出现异常触发</code></pre><h2 id="配置文件的名称和位置"><a href="#配置文件的名称和位置" class="headerlink" title="配置文件的名称和位置"></a>配置文件的名称和位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.config.name</span><br><span class="line">spring.config.location</span><br></pre></td></tr></table></figure><p><strong>注</strong>：这是两个需要很早初始化的属性，只能写在环境变量里(OS environment variable, a system property, or a command-line argument)</p>]]></content>
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
